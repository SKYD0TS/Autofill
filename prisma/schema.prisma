// Schema for Web Admin database

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id    Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  role       Role
  email      String?  @db.VarChar(100)
  created_at DateTime @default(now())
  google_user_id Int? @unique 
  google_user GoogleUser? @relation(fields: [google_user_id], references: [id])

  webTraffic WebTraffic[]
  formSubmissions FormSubmission[]
  token_id Int?
  token     Token? @relation("UserToken", fields: [token_id], references: [token_id])
  vouchers   Voucher[]
  voucherUsage VoucherUsage[]
  tokenPurchases TokenPurchase[]
}

model GoogleUser {
  id Int      @id @default(autoincrement())
  google_id      String   @unique   // Google ID from OAuth
  email          String?  @db.VarChar(100)
  first_name     String?  @db.VarChar(100)
  last_name      String?  @db.VarChar(100)
  profile_picture String? @db.VarChar(255)
  created_at     DateTime @default(now())
  user           User?    @relation
  role Role @default(customer)

  webTraffic WebTraffic[]
  formSubmissions FormSubmission[]
  tokens     Token? @relation("GoogleUserToken", fields: [token_id], references: [token_id])
  token_id Int?
  vouchers   Voucher[]
  voucherUsage VoucherUsage[]
  tokenPurchases TokenPurchase[]
}


enum Role {
  admin
  customer
}

model WebTraffic {
  traffic_id Int      @id @default(autoincrement())
  visit_date DateTime @default(now())
  ip_address String   @db.VarChar(45)
  page_visited String @db.VarChar(255)
  google_user_id Int?
  user_id    Int?
  googleUser GoogleUser? @relation(fields: [google_user_id], references: [id])
  user       User?    @relation(fields: [user_id], references: [user_id])
}


model FormSubmission {
  submission_id Int      @id @default(autoincrement())
  form_data     String   @db.Text
  submission_date DateTime @default(now())
  google_user_id Int?
  user_id       Int
  googleUser    GoogleUser? @relation(fields: [google_user_id], references: [id])
  user          User     @relation(fields: [user_id], references: [user_id])
}


model Token {
  token_id   Int      @id @default(autoincrement())
  token_count Int     @default(5)
  last_updated DateTime @default(now())
  googleUser GoogleUser[] @relation("GoogleUserToken")
  user       User[]     @relation("UserToken")
}


model Voucher {
  voucher_id     Int      @id @default(autoincrement())
  voucher_code   String   @unique @db.VarChar(20)
  discount_percentage Decimal @db.Decimal(5,2)
  created_at     DateTime @default(now())
  admin_id       Int

  admin          User     @relation(fields: [admin_id], references: [user_id])
  voucherUsage   VoucherUsage[]  // Added relation to VoucherUsage
  googleUsers    GoogleUser[]    // Added this field to represent the relation to GoogleUser
}

model VoucherUsage {
  usage_id  Int      @id @default(autoincrement())
  used_at   DateTime @default(now())
  voucher_id Int
  user_id   Int
  google_user_id Int?
  voucher   Voucher  @relation(fields: [voucher_id], references: [voucher_id])
  user      User     @relation(fields: [user_id], references: [user_id])
  googleUser GoogleUser? @relation(fields: [google_user_id], references: [id]) // Opposite relation for GoogleUser
}



model TokenPurchase {
  purchase_id    Int      @id @default(autoincrement())
  token_amount   Int
  purchase_amount Decimal   @db.Decimal(10,2)
  purchase_date  DateTime @default(now())
  google_user_id Int?
  user_id        Int?
  googleUser     GoogleUser? @relation(fields: [google_user_id], references: [id])
  user           User?     @relation(fields: [user_id], references: [user_id])
}


model BotActivity {
  activity_id   Int      @id @default(autoincrement())
  form_id       Int
  status        BotStatus
  error_message String?  @db.Text
  activity_date DateTime @default(now())
}

enum BotStatus {
  success
  failed
}

model SystemStatus {
  status_id  Int      @id @default(autoincrement())
  system_status String @db.VarChar(20)
  error_log  String?  @db.Text
  last_updated DateTime @default(now())
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  message         String   @db.Text
  type            NotificationType
  created_at      DateTime @default(now())
}

enum NotificationType {
  error
  anomaly
  info
}
